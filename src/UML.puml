@startuml
'TODO Finish UML'

'https://plantuml.com/class-diagram
'skinparam classAttributeIconSize 0
package com.vrm.vehicle {
    abstract class Vehicle {
        # String plateNumber
        - String make
        - String model
        - int year
        - boolean isLeased
        + String getHeader()
        + String toString()
        + boolean equals(Object)
        ~ {abstract} Vehicle clone()
    }
    abstract class Car {
        - int passengerCapacity
        + String getHeader()
        + String toString()
        - boolean equals(Object)
    }
    abstract class Truck {
        - double weightCapacity
        + String getHeader()
        + String toString()
        + boolean equals(Object)
    }
    class ElectricCar {
        - {static} String lastPlate = 1001
        - {static} final String PLATE_PREFIX = "EC"
        - double range
        - {static} String generatePlate()
        ~ ElectricCar clone()
        + String getHeader()
        + String toString()
        + boolean equals()
    }
    class GasolineCar {
        - {static} String lastPlate = 1001
        - {static} final String PLATE_PREFIX = "GC"
        - {static} String generatePlate()
        ~ GasolineCar clone()
        + String getHeader()
    }
    class ElectricTruck {
        - {static} String lastPlate = 1001
        - {static} String PLATE_PREFIX = "ET"
        - double range
        - {static} String generatePlate()
        ~ ElectricTruck clone()
        + String getHeader()
        + String toString()
        + boolean equals()
    }
    class DieselTruck {
        - {static} String lastPlate = 1001
        - {static} final String PLATE_PREFIX = "DT"
        - {static} String generatePlate()
        ~ DieselTruck clone()
        + String getHeader()
        + String toString()
        + boolean equals()
    }

    class Fleet {
    int MAX_CAPACITY
    Vehicle[] vehicles
    int vehicleCount

    boolean addVehicle(Vehicle)
    boolean appendArray(Vehicle[])
    boolean removeVehicle (int)
    boolean updateVehicle(int, Vehicle)
    Vehicle retrieveVehicle (int index)
    Vehicle retrieve Vehicle(String plateNumber))
    boolean toggleLeased(String plateNumber)
    Vehicle[] getVehicles()
    int getVehicleCount()
    int getMAX_CAPACITY()
    Vehicle[] filterVehicles(String type)
    String showOfType(String type)
    String showNotLeased()
    String toString()
    {static} String showArray(Vehicle[], int length)
    DieselTruck getLargestTruck()
    {static} ElectricTruck[] copyVehicles(ElectricTruck[])
    }

    Fleet o-- Vehicle
    Vehicle <|-- Truck
    Vehicle <|-- Car
    Car <|-- ElectricCar
    Car <|-- GasolineCar
    Truck <|-- DieselTruck
    Truck <|-- ElectricTruck
}

package com.vrm.client {

    class ClientManager {
        - Client[] clients
        - final int MAX_CLIENTS
        - int clientCount
        + Client retrieveClient(int index)
        + Client retrieveClient(String name)
        + boolean addClient(Client)
        + boolean removeClient(int index)
        + boolean updateClient(int index, String newName)
        + String toString()
    }
    class Client {
        - String name
        + boolean equals()
        + String toString()
    }

    class Lease {
        - {static} int nextID = 0
        - int ID
        - Client client
        - int plateNumber
        + String getHeader()
        + String toString()
    }
    class LeaseManager {
    - Lease[] leasedVehicles
    - int leasedVehiclesCount
    - final Fleet fleet
    + LeaseManager(Fleet fleet)
    + int getLastLeaseID()
    + int createLease(Client client, String plateNumber)
    + int removeLease(int leaseID)
    + Lease retrieveLease(int leaseID)
    - Lease[] getClientLeases() {helper method}
    + int clientNumberOfLeases(String clientName)
    + String showClientLeases(String clientName)
    + String toString()
    }

    ClientManager *-- Client
    LeaseManager *-- Lease
    Lease -- Client
    LeaseManager -- Fleet

}

package com.vrm.driver {
    class Driver {
        ~ {static} Scanner key
        ~ {static} Fleet fleet
        ~ {static} ClientManager clientManager
        ~ {static} LeaseManager leaseManager
        + {static} void main()
    }
    class ClientDriver {
        + {static} void getMenu()
        + {static} boolean createClient()
        + {static} boolean deleteClient()
        + {static} boolean updateClient()
    }
    class FleetDriver {
        - {static} final String TYPE_MENU = "..."
        + {static} void getMenu()
        + {static} boolean createVehicle()
        + {static} boolean deleteVehicle()
        + {static} boolean updateVehicle()
        - {static} boolean updateEC(ElectricCar)
        - {static} boolean updateGC(GasolineCar)
        - {static} boolean updateDT(DieselTruck)
        - {static} boolean updateET(ElectricTruck)
        + {static} String showAll()
        + {static} String showOfType()
        + {static} void getLargestTruck()
        + {static} boolean copyElectricTrucks()

    }
    class LeaseDriver {
        + {static} void getMenu()
        + {static} boolean leaseVehicle()
        + {static} boolean endLease()
        + {static} String showAll()
        + {static} String showByClient()
    }
    class Menu {
        + {static} void displaySplashScreen()
        + {static} boolean bootUp()
        + {static} void getMainMenu()
        + {static} void exit(int exitCode)
    }
    class Selector {
    + {static} int pickItem(String menu, int min, int max)
    + {static} int pickLease()
    + {static} boolean pressToConfirm()
    + {static} void pressToContinue()
    }
    class TestScenario {
    + {static} void testScenario()
    }

    Driver --> ClientManager
    Driver --> Fleet
    Driver --> LeaseManager

    ClientDriver --> Driver
    FleetDriver --> Driver
    LeaseDriver --> Driver

    Driver --> Menu
    Driver --> TestScenario
}


@enduml